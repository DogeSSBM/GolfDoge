!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BLACK	DogeLib/Colors.h	/^const Color BLACK   = {0x00, 0x00, 0x00, 0xFF};$/;"	v
BLEND_ADD	DogeLib/Types.h	46;"	d
BLEND_ALPHA	DogeLib/Types.h	45;"	d
BLEND_MOD	DogeLib/Types.h	47;"	d
BLEND_NONE	DogeLib/Types.h	44;"	d
BLUE	DogeLib/Colors.h	/^const Color BLUE    = {0x00, 0x00, 0xFF, 0xFF};$/;"	v
BORDERLESS	DogeLib/Types.h	/^    BORDERLESS = SDL_WINDOW_FULLSCREEN_DESKTOP,$/;"	e	enum:__anon9
B_CUE	main.c	/^typedef enum{B_CUE, B_SOLID, B_STRIPE}BallType;$/;"	e	enum:__anon3	file:
B_SOLID	main.c	/^typedef enum{B_CUE, B_SOLID, B_STRIPE}BallType;$/;"	e	enum:__anon3	file:
B_STRIPE	main.c	/^typedef enum{B_CUE, B_SOLID, B_STRIPE}BallType;$/;"	e	enum:__anon3	file:
Ball	main.c	/^}Ball;$/;"	t	typeref:struct:__anon4	file:
BallType	main.c	/^typedef enum{B_CUE, B_SOLID, B_STRIPE}BallType;$/;"	t	typeref:enum:__anon3	file:
BlendMode	DogeLib/Types.h	/^typedef SDL_BlendMode       BlendMode;$/;"	t
CCf	DogeLib/Vec.h	/^Coordf CCf(const Coord coord)$/;"	f
COLORS_H	DogeLib/Colors.h	2;"	d
COORDS_H	DogeLib/Coords.h	2;"	d
CYAN	DogeLib/Colors.h	/^const Color CYAN    = {0x00, 0xFF, 0xFF, 0xFF};$/;"	v
CfC	DogeLib/Vec.h	/^Coord CfC(const Coordf coordf)$/;"	f
Color	DogeLib/Types.h	/^typedef SDL_Color           Color;$/;"	t
Coord	DogeLib/Types.h	/^}Coord, Range, Length, Offset, Ratio;$/;"	t	typeref:union:__anon10
CoordPair	DogeLib/Types.h	/^}CoordPair, RangePair, LengthPair, OffsetPair;$/;"	t	typeref:union:__anon16
Coordf	DogeLib/Types.h	/^}Coordf, Vectorf, Rangef, Lengthf, Offsetf;$/;"	t	typeref:union:__anon22
DECLS_H	DogeLib/Decls.h	2;"	d
DEFAULT_WINDOW_XLEN	DogeLib/Graphics.h	4;"	d
DEFAULT_WINDOW_YLEN	DogeLib/Graphics.h	5;"	d
DIR_D	DogeLib/Types.h	/^typedef enum{DIR_U = 0, DIR_R, DIR_D, DIR_L}Direction;$/;"	e	enum:__anon24
DIR_L	DogeLib/Types.h	/^typedef enum{DIR_U = 0, DIR_R, DIR_D, DIR_L}Direction;$/;"	e	enum:__anon24
DIR_R	DogeLib/Types.h	/^typedef enum{DIR_U = 0, DIR_R, DIR_D, DIR_L}Direction;$/;"	e	enum:__anon24
DIR_U	DogeLib/Types.h	/^typedef enum{DIR_U = 0, DIR_R, DIR_D, DIR_L}Direction;$/;"	e	enum:__anon24
DISPLAY_H	DogeLib/Display.h	2;"	d
DOGEUTIL_H	DogeLib/DogeUtil.h	2;"	d
Direction	DogeLib/Types.h	/^typedef enum{DIR_U = 0, DIR_R, DIR_D, DIR_L}Direction;$/;"	t	typeref:enum:__anon24
DirectionChar	DogeLib/Types.h	/^const char DirectionChar[4] = {'U', 'R', 'D', 'L'};$/;"	v
EVENTS_H	DogeLib/Events.h	2;"	d
Event	DogeLib/Types.h	/^typedef SDL_Event           Event;$/;"	t
FILE_H	DogeLib/File.h	2;"	d
FPS	DogeLib/Timing.h	5;"	d
FULLSCREEN	DogeLib/Types.h	/^    FULLSCREEN = SDL_WINDOW_FULLSCREEN,$/;"	e	enum:__anon9
File	DogeLib/Types.h	/^typedef FILE                File;$/;"	t
GETINT_H	DogeLib/GetInt.h	2;"	d
GRAPHICS_H	DogeLib/Graphics.h	2;"	d
GREEN	DogeLib/Colors.h	/^const Color GREEN   = {0x00, 0xFF, 0x00, 0xFF};$/;"	v
GREY	DogeLib/Colors.h	/^const Color GREY    = {0x80, 0x80, 0x80, 0xFF};$/;"	v
GREY1	DogeLib/Colors.h	/^const Color GREY1   = {0xAA, 0xAA, 0xAA, 0xFF};$/;"	v
GREY2	DogeLib/Colors.h	/^const Color GREY2   = {0x7E, 0x7E, 0x7E, 0xFF};$/;"	v
GREY3	DogeLib/Colors.h	/^const Color GREY3   = {0x52, 0x52, 0x52, 0xFF};$/;"	v
HOLECOLOR	main.c	/^const Color HOLECOLOR = {200, 64, 0, 255};$/;"	v
I16MAX	DogeLib/Types.h	25;"	d
I16MIN	DogeLib/Types.h	24;"	d
I32MAX	DogeLib/Types.h	27;"	d
I32MIN	DogeLib/Types.h	26;"	d
I64MAX	DogeLib/Types.h	29;"	d
I64MIN	DogeLib/Types.h	28;"	d
I8MAX	DogeLib/Types.h	23;"	d
I8MIN	DogeLib/Types.h	22;"	d
IMAGE_H	DogeLib/Image.h	2;"	d
INPUT_H	DogeLib/Input.h	2;"	d
Img	DogeLib/Types.h	/^typedef SDL_Surface         Img;$/;"	t
Key	DogeLib/Types.h	/^typedef SDL_Keycode         Key;$/;"	t
Length	DogeLib/Types.h	/^}Coord, Range, Length, Offset, Ratio;$/;"	t	typeref:union:__anon10
LengthPair	DogeLib/Types.h	/^}CoordPair, RangePair, LengthPair, OffsetPair;$/;"	t	typeref:union:__anon16
Lengthf	DogeLib/Types.h	/^}Coordf, Vectorf, Rangef, Lengthf, Offsetf;$/;"	t	typeref:union:__anon22
MAGENTA	DogeLib/Colors.h	/^const Color MAGENTA = {0xFF, 0x00, 0xFF, 0xFF};$/;"	v
MAX_SPEED	main.c	4;"	d	file:
MAX_STROKE	main.c	5;"	d	file:
MOUSE_B	DogeLib/Types.h	53;"	d
MOUSE_F	DogeLib/Types.h	52;"	d
MOUSE_L	DogeLib/Types.h	49;"	d
MOUSE_M	DogeLib/Types.h	50;"	d
MOUSE_R	DogeLib/Types.h	51;"	d
MW_D	DogeLib/Types.h	55;"	d
MW_L	DogeLib/Types.h	58;"	d
MW_R	DogeLib/Types.h	56;"	d
MW_U	DogeLib/Types.h	57;"	d
NUMBALLS	main.c	3;"	d	file:
Offset	DogeLib/Types.h	/^}Coord, Range, Length, Offset, Ratio;$/;"	t	typeref:union:__anon10
OffsetPair	DogeLib/Types.h	/^}CoordPair, RangePair, LengthPair, OffsetPair;$/;"	t	typeref:union:__anon16
Offsetf	DogeLib/Types.h	/^}Coordf, Vectorf, Rangef, Lengthf, Offsetf;$/;"	t	typeref:union:__anon22
PANIC_H	DogeLib/Panic.h	2;"	d
PI	DogeLib/Types.h	60;"	d
PINK	DogeLib/Colors.h	/^const Color PINK    = {0xFF, 0xC0, 0xCB, 0xFF};$/;"	v
POLY_H	DogeLib/Poly.h	2;"	d
Poly	DogeLib/Types.h	/^}Poly;$/;"	t	typeref:struct:__anon15
RED	DogeLib/Colors.h	/^const Color RED     = {0xFF, 0x00, 0x00, 0xFF};$/;"	v
ROUND	main.c	2;"	d	file:
Range	DogeLib/Types.h	/^}Coord, Range, Length, Offset, Ratio;$/;"	t	typeref:union:__anon10
RangePair	DogeLib/Types.h	/^}CoordPair, RangePair, LengthPair, OffsetPair;$/;"	t	typeref:union:__anon16
Rangef	DogeLib/Types.h	/^}Coordf, Vectorf, Rangef, Lengthf, Offsetf;$/;"	t	typeref:union:__anon22
Ratio	DogeLib/Types.h	/^}Coord, Range, Length, Offset, Ratio;$/;"	t	typeref:union:__anon10
Rect	DogeLib/Types.h	/^typedef SDL_Rect            Rect;$/;"	t
S_CLICKD	main.c	/^    S_CLICKD,$/;"	e	enum:__anon1	file:
S_CLICKU	main.c	/^    S_CLICKU,$/;"	e	enum:__anon1	file:
S_HOVER	main.c	/^    S_HOVER,$/;"	e	enum:__anon1	file:
S_N	main.c	/^    S_N$/;"	e	enum:__anon1	file:
S_WAIT	main.c	/^    S_WAIT,$/;"	e	enum:__anon1	file:
Scancode	DogeLib/Types.h	/^typedef SDL_Scancode        Scancode;$/;"	t
Stroke	main.c	/^}Stroke;$/;"	t	typeref:struct:__anon2	file:
StrokeState	main.c	/^}StrokeState;$/;"	t	typeref:enum:__anon1	file:
TABLECOLOR	main.c	/^const Color TABLECOLOR = {0, 128, 32, 255};$/;"	v
TEXT_H	DogeLib/Text.h	2;"	d
TIMING_H	DogeLib/Timing.h	2;"	d
TPF	DogeLib/Timing.h	6;"	d
TPS	DogeLib/Timing.h	4;"	d
Texture	DogeLib/Types.h	/^typedef SDL_Texture         Texture;$/;"	t
Time	DogeLib/Types.h	/^typedef time_t              Time;$/;"	t
U16MAX	DogeLib/Types.h	32;"	d
U32MAX	DogeLib/Types.h	33;"	d
U64MAX	DogeLib/Types.h	34;"	d
U8MAX	DogeLib/Types.h	31;"	d
VEC_H	DogeLib/Vec.h	2;"	d
Vectorf	DogeLib/Types.h	/^}Coordf, Vectorf, Rangef, Lengthf, Offsetf;$/;"	t	typeref:union:__anon22
WHITE	DogeLib/Colors.h	/^const Color WHITE   = {0xFF, 0xFF, 0xFF, 0xFF};$/;"	v
WINDOWED	DogeLib/Types.h	/^    WINDOWED = 0$/;"	e	enum:__anon9
WindowMode	DogeLib/Types.h	/^}WindowMode;$/;"	t	typeref:enum:__anon9
YELLOW	DogeLib/Colors.h	/^const Color YELLOW  = {0xFF, 0xFF, 0x00, 0xFF};$/;"	v
arr	DogeLib/Types.h	/^    Coord arr[2];$/;"	m	union:__anon16
arr	DogeLib/Types.h	/^    float arr[2];$/;"	m	union:__anon22
arr	DogeLib/Types.h	/^    int arr[2];$/;"	m	union:__anon10
ballHoled	main.c	/^bool ballHoled(const Coordf bpos, const Coord hpos)$/;"	f
ballWallBounce	main.c	/^Ball ballWallBounce(Ball ball, const Length window)$/;"	f
ballsMoving	main.c	/^bool ballsMoving(Ball *balls)$/;"	f
bezier	DogeLib/Graphics.h	/^void bezier(const Coord *pos, const uint numc, const uint nums)$/;"	f
c1	DogeLib/Types.h	/^        Coord c1;$/;"	m	struct:__anon16::__anon17
c1	DogeLib/Types.h	/^        int c1;$/;"	m	struct:__anon10::__anon11
c2	DogeLib/Types.h	/^        Coord c2;$/;"	m	struct:__anon16::__anon17
c2	DogeLib/Types.h	/^        int c2;$/;"	m	struct:__anon10::__anon11
cf3Deg	DogeLib/Vec.h	/^float cf3Deg(const Coordf vtx, const Coordf pos1, const Coordf pos2)$/;"	f
cf3Rad	DogeLib/Vec.h	/^float cf3Rad(const Coordf vtx, const Coordf pos1, const Coordf pos2)$/;"	f
cfAbs	DogeLib/Vec.h	/^Coordf cfAbs(const Coordf coord)$/;"	f
cfAdd	DogeLib/Vec.h	/^Coordf cfAdd(const Coordf coord, const Vectorf vec)$/;"	f
cfCfToDeg	DogeLib/Vec.h	/^float cfCfToDeg(const Coordf pos1, const Coordf pos2)$/;"	f
cfCfToRad	DogeLib/Vec.h	/^float cfCfToRad(const Coordf pos1, const Coordf pos2)$/;"	f
cfDist	DogeLib/Vec.h	/^float cfDist(const Coordf coord1, const Coordf coord2)$/;"	f
cfDiv	DogeLib/Vec.h	/^Coordf cfDiv(const Coordf coord, const float num)$/;"	f
cfDot	DogeLib/Vec.h	/^float cfDot(const Coordf coord1, const Coordf coord2)$/;"	f
cfMag	DogeLib/Vec.h	/^float cfMag(const Coordf coord)$/;"	f
cfMax	DogeLib/Vec.h	/^float cfMax(const Coordf coordf)$/;"	f
cfMid	DogeLib/Vec.h	/^Coordf cfMid(const Coordf coord1, const Coordf coord2)$/;"	f
cfMin	DogeLib/Vec.h	/^float cfMin(const Coordf coordf)$/;"	f
cfMul	DogeLib/Vec.h	/^Coordf cfMul(const Coordf coord, const float num)$/;"	f
cfNeg	DogeLib/Vec.h	/^Coordf cfNeg(const Coordf coord)$/;"	f
cfNormalize	DogeLib/Vec.h	/^Coordf cfNormalize(const Coordf coord)$/;"	f
cfRotateDeg	DogeLib/Vec.h	/^Coordf cfRotateDeg(const Coordf vec, const float d)$/;"	f
cfRotateRad	DogeLib/Vec.h	/^Coordf cfRotateRad(const Coordf vec, const float n)$/;"	f
cfSub	DogeLib/Vec.h	/^Coordf cfSub(const Coordf coord, const Vectorf vec)$/;"	f
cfToDeg	DogeLib/Vec.h	/^float cfToDeg(const Coordf coord)$/;"	f
cfToRad	DogeLib/Vec.h	/^float cfToRad(const Coordf coord)$/;"	f
clamp	DogeLib/Coords.h	/^int clamp(const int n, const int min, const int max)$/;"	f
clear	DogeLib/Graphics.h	/^void clear(void)$/;"	f
clearTerminal	DogeLib/DogeUtil.h	/^void clearTerminal(void)$/;"	f
clickDown	main.c	/^    Coordf clickDown;$/;"	m	struct:__anon2	file:
clickUp	main.c	/^    Coordf clickUp;$/;"	m	struct:__anon2	file:
colPolyBb	DogeLib/Collision.h	/^bool colPolyBb(Poly *const p1, Poly *const p2)$/;"	f
collide	main.c	/^void collide(Ball *a, Ball *b)$/;"	f
collideBalls	main.c	/^uint collideBalls(Ball *balls)$/;"	f
color	DogeLib/Types.h	/^    Color color;$/;"	m	struct:__anon15
color	main.c	/^    Color color;$/;"	m	struct:__anon4	file:
colorToU32	DogeLib/Graphics.h	/^u32 colorToU32(const Color c)$/;"	f
coordAdd	DogeLib/Coords.h	/^Coord coordAdd(const Coord coord1, const uint num)$/;"	f
coordCenter	DogeLib/Coords.h	/^Coord coordCenter(const Coord coord, const Length len)$/;"	f
coordClamp	DogeLib/Coords.h	/^Coord coordClamp(const Coord coord, const Range x, const Range y)$/;"	f
coordClampLen	DogeLib/Coords.h	/^Coord coordClampLen(const Coord coord, const Length len)$/;"	f
coordDistSq	DogeLib/Coords.h	/^uint coordDistSq(const Coord coord1, const Coord coord2)$/;"	f
coordDiv	DogeLib/Coords.h	/^Coord coordDiv(const Coord coord, const int num)$/;"	f
coordDivCoord	DogeLib/Coords.h	/^Coord coordDivCoord(const Coord coord1, const Coord coord2)$/;"	f
coordInRange	DogeLib/Coords.h	/^bool coordInRange(const Coord coord, const Range range)$/;"	f
coordInRect	DogeLib/Coords.h	/^bool coordInRect(const Coord coord, const Rect rect)$/;"	f
coordInRectArr	DogeLib/Coords.h	/^int coordInRectArr(const Coord coord, Rect *const rect, const int num)$/;"	f
coordInRectList	DogeLib/Text.h	/^int coordInRectList(const Coord coord, Rect *const rect, const int num)$/;"	f
coordInTextList	DogeLib/Text.h	/^int coordInTextList(const Coord coord, const Coord start, const Coord stop, const uint num, const char **textList)$/;"	f
coordInWindow	DogeLib/Graphics.h	/^bool coordInWindow(const Coord pos)$/;"	f
coordInv	DogeLib/Coords.h	/^Coord coordInv(const Coord coord)$/;"	f
coordLeast	DogeLib/Coords.h	/^Coord coordLeast(const Coord pos1, const Coord pos2)$/;"	f
coordMax	DogeLib/Coords.h	/^int coordMax(const Coord coord)$/;"	f
coordMaxCoord	DogeLib/Coords.h	/^bool coordMaxCoord(const Coord pos1, const Coord pos2)$/;"	f
coordMid	DogeLib/Coords.h	/^Coord coordMid(const Coord coord1, const Coord coord2)$/;"	f
coordMin	DogeLib/Coords.h	/^int coordMin(const Coord coord)$/;"	f
coordMinCoord	DogeLib/Coords.h	/^bool coordMinCoord(const Coord pos1, const Coord pos2)$/;"	f
coordMod	DogeLib/Coords.h	/^Coord coordMod(const Coord coord, const int num)$/;"	f
coordMost	DogeLib/Coords.h	/^Coord coordMost(const Coord pos1, const Coord pos2)$/;"	f
coordMul	DogeLib/Coords.h	/^Coord coordMul(const Coord coord, const int num)$/;"	f
coordNz	DogeLib/Coords.h	/^bool coordNz(const Coord coord)$/;"	f
coordOffset	DogeLib/Coords.h	/^Coord coordOffset(const Coord coord, const Offset off)$/;"	f
coordOffsetMul	DogeLib/Coords.h	/^Coord coordOffsetMul(const Coord coord1, const Coord coord2)$/;"	f
coordSame	DogeLib/Coords.h	/^bool coordSame(const Coord pos1, const Coord pos2)$/;"	f
coordShift	DogeLib/Coords.h	/^Coord coordShift(const Coord coord, const Direction dir, const int units)$/;"	f
coordSub	DogeLib/Coords.h	/^Coord coordSub(const Coord coord1, const Coord coord2)$/;"	f
coordUncenter	DogeLib/Coords.h	/^Coord coordUncenter(const Coord coord, const Length len)$/;"	f
coordWrap	DogeLib/Coords.h	/^Coord coordWrap(const Coord coord, const Range x, const Range y)$/;"	f
coordfDist	DogeLib/Coords.h	/^float coordfDist(const Coordf coord1, const Coordf coord2)$/;"	f
coordfDiv	DogeLib/Coords.h	/^Coordf coordfDiv(const Coordf coord, const float num)$/;"	f
coordfNormalize	DogeLib/Coords.h	/^Coordf coordfNormalize(const Coordf coord)$/;"	f
coordfOffset	DogeLib/Coords.h	/^Coordf coordfOffset(const Coordf coord, const Offsetf off)$/;"	f
coordfOffsetMul	DogeLib/Coords.h	/^Coordf coordfOffsetMul(const Coordf coord1, const Coordf coord2)$/;"	f
coordsToRect	DogeLib/Coords.h	/^Rect coordsToRect(const Coord coord1, const Coord coord2)$/;"	f
defaultColor	DogeLib/Graphics.h	/^    Color defaultColor;$/;"	m	struct:__anon8
degInv	DogeLib/Vec.h	/^float degInv(const float deg)$/;"	f
degMagToCf	DogeLib/Vec.h	/^Coordf degMagToCf(const float deg, const float mag)$/;"	f
degReduce	DogeLib/Vec.h	/^float degReduce(const float deg)$/;"	f
degToCf	DogeLib/Vec.h	/^Coordf degToCf(const float deg)$/;"	f
degToRad	DogeLib/Vec.h	/^float degToRad(const float deg)$/;"	f
digits	DogeLib/GetInt.h	/^uint digits(int n)$/;"	f
dirAXA	DogeLib/Coords.h	/^bool dirAXA(const Direction dir1, const Direction dir2)$/;"	f
dirINV	DogeLib/Coords.h	/^Direction dirINV(const Direction dir)$/;"	f
dirLR	DogeLib/Coords.h	/^Direction dirLR(const Direction dir)$/;"	f
dirNEG	DogeLib/Coords.h	/^Direction dirNEG(const Direction dir)$/;"	f
dirPOS	DogeLib/Coords.h	/^Direction dirPOS(const Direction dir)$/;"	f
dirROL	DogeLib/Coords.h	/^Direction dirROL(const Direction dir)$/;"	f
dirROR	DogeLib/Coords.h	/^Direction dirROR(const Direction dir)$/;"	f
dirUD	DogeLib/Coords.h	/^Direction dirUD(const Direction dir)$/;"	f
draw	DogeLib/Graphics.h	/^void draw(void)$/;"	f
drawBalls	main.c	/^void drawBalls(Ball *balls)$/;"	f
drawCircle	DogeLib/Graphics.h	/^void drawCircle(const uint x, const uint y, const uint radius)$/;"	f
drawCircleCoord	DogeLib/Graphics.h	/^void drawCircleCoord(const Coord pos, const uint radius)$/;"	f
drawHLine	DogeLib/Graphics.h	/^void drawHLine(const uint x, const uint y, int len)$/;"	f
drawImg	DogeLib/Image.h	/^void drawImg(Img *image)$/;"	f
drawLine	DogeLib/Graphics.h	/^void drawLine(const uint x1, const uint y1, const uint x2, const uint y2)$/;"	f
drawLineCoordPair	DogeLib/Graphics.h	/^void drawLineCoordPair(const CoordPair pair)$/;"	f
drawLineCoords	DogeLib/Graphics.h	/^void drawLineCoords(const Coord pos1, const Coord pos2)$/;"	f
drawPixel	DogeLib/Graphics.h	/^void drawPixel(const uint x, const uint y)$/;"	f
drawPixelCoord	DogeLib/Graphics.h	/^void drawPixelCoord(const Coord pos)$/;"	f
drawPoly	DogeLib/Graphics.h	/^void drawPoly(Coord *pos, const uint num)$/;"	f
drawRect	DogeLib/Graphics.h	/^void drawRect(const uint x, const uint y, const uint xlen, const uint ylen)$/;"	f
drawRectCentered	DogeLib/Graphics.h	/^void drawRectCentered(const uint x, const uint y, const uint xlen, const uint ylen)$/;"	f
drawRectCenteredCoordLength	DogeLib/Graphics.h	/^void drawRectCenteredCoordLength(const Coord pos, const Length len)$/;"	f
drawRectCenteredCoords	DogeLib/Graphics.h	/^void drawRectCenteredCoords(const Coord pos1, const Coord pos2)$/;"	f
drawRectCoordLength	DogeLib/Graphics.h	/^void drawRectCoordLength(const Coord pos, const Length len)$/;"	f
drawRectCoords	DogeLib/Graphics.h	/^void drawRectCoords(const Coord pos1, const Coord pos2)$/;"	f
drawRectRect	DogeLib/Graphics.h	/^void drawRectRect(const Rect rect)$/;"	f
drawSquare	DogeLib/Graphics.h	/^void drawSquare(const uint x, const uint y, const uint len)$/;"	f
drawSquareCoord	DogeLib/Graphics.h	/^void drawSquareCoord(const Coord pos, const uint len)$/;"	f
drawStroke	main.c	/^void drawStroke(const Stroke stroke, const Coordf bpos)$/;"	f
drawText	DogeLib/Text.h	/^Length drawText(const char *text, const int x, const int y)$/;"	f
drawTextCentered	DogeLib/Text.h	/^Length drawTextCentered(const char *text, const int x, const int y)$/;"	f
drawTextCenteredCoord	DogeLib/Text.h	/^Length drawTextCenteredCoord(const char *text, const Coord pos)$/;"	f
drawTextCoord	DogeLib/Text.h	/^Length drawTextCoord(const char *text, const Coord pos)$/;"	f
drawTexture	DogeLib/Image.h	/^Length drawTexture(Texture *texture, const int x, const int y)$/;"	f
drawTextureCentered	DogeLib/Image.h	/^Length drawTextureCentered(Texture *texture, const int x, const int y)$/;"	f
drawTextureCenteredCoord	DogeLib/Image.h	/^Length drawTextureCenteredCoord(Texture *texture, const Coord pos)$/;"	f
drawTextureCenteredCoordResize	DogeLib/Image.h	/^Length drawTextureCenteredCoordResize(Texture *texture, const Coord pos, const Length len)$/;"	f
drawTextureCenteredResize	DogeLib/Image.h	/^Length drawTextureCenteredResize(Texture *texture, const int x, const int y, const int xlen, const int ylen)$/;"	f
drawTextureCoord	DogeLib/Image.h	/^Length drawTextureCoord(Texture *texture, const Coord pos)$/;"	f
drawTextureCoordResize	DogeLib/Image.h	/^Length drawTextureCoordResize(Texture *texture, const Coord pos, const Length len)$/;"	f
drawTextureResize	DogeLib/Image.h	/^Length drawTextureResize(Texture *texture, const int x, const int y, const int xlen, const int ylen)$/;"	f
drawTri	DogeLib/Graphics.h	/^void drawTri(const Coord pos1, const Coord pos2, const Coord pos3)$/;"	f
drawVLine	DogeLib/Graphics.h	/^void drawVLine(const uint x, const uint y, int len)$/;"	f
events	DogeLib/Events.h	/^void events(const uint endOfFrame)$/;"	f
fSameSign	DogeLib/Vec.h	/^bool fSameSign(const float num1, const float num2)$/;"	f
fclamp	DogeLib/Vec.h	/^float fclamp(const float n, const float min, const float max)$/;"	f
fileLen	DogeLib/File.h	/^uint fileLen(const char *filePath)$/;"	f
fileReadText	DogeLib/File.h	/^char* fileReadText(const char *filePath)$/;"	f
fillBorder	DogeLib/Graphics.h	/^void fillBorder(uint x, uint y, uint xlen, uint ylen, int b)$/;"	f
fillBorderCoordSquare	DogeLib/Graphics.h	/^void fillBorderCoordSquare(const Coord pos, const uint len, const int b)$/;"	f
fillBorderCoords	DogeLib/Graphics.h	/^void fillBorderCoords(const Coord pos, const Length len, const int b)$/;"	f
fillCircle	DogeLib/Graphics.h	/^void fillCircle(const uint x, const uint y, const uint radius)$/;"	f
fillCircleCoord	DogeLib/Graphics.h	/^void fillCircleCoord(const Coord pos, const uint radius)$/;"	f
fillPoly	DogeLib/Graphics.h	/^void fillPoly(Coord *pos, const uint num)$/;"	f
fillRect	DogeLib/Graphics.h	/^void fillRect(const uint x, const uint y, const uint xlen, const uint ylen)$/;"	f
fillRectCentered	DogeLib/Graphics.h	/^void fillRectCentered(const uint x, const uint y, const uint xlen, const uint ylen)$/;"	f
fillRectCenteredCoordLength	DogeLib/Graphics.h	/^void fillRectCenteredCoordLength(const Coord pos, const Length len)$/;"	f
fillRectCenteredCoords	DogeLib/Graphics.h	/^void fillRectCenteredCoords(const Coord pos1, const Coord pos2)$/;"	f
fillRectCoordLength	DogeLib/Graphics.h	/^void fillRectCoordLength(const Coord pos, const Length len)$/;"	f
fillRectCoords	DogeLib/Graphics.h	/^void fillRectCoords(const Coord pos1, const Coord pos2)$/;"	f
fillRectRect	DogeLib/Graphics.h	/^void fillRectRect(const Rect rect)$/;"	f
fillScreen	DogeLib/Graphics.h	/^void fillScreen(void)$/;"	f
fillSquare	DogeLib/Graphics.h	/^void fillSquare(const uint x, const uint y, const uint len)$/;"	f
fillSquareCoord	DogeLib/Graphics.h	/^void fillSquareCoord(const Coord pos, const uint len)$/;"	f
fillSquareCoordResize	DogeLib/Graphics.h	/^void fillSquareCoordResize(const Coord pos, const uint len, const int resize)$/;"	f
fillSquareResize	DogeLib/Graphics.h	/^void fillSquareResize(const uint x, const uint y, const uint len, const int resize)$/;"	f
fillTri	DogeLib/Graphics.h	/^void fillTri(const Coord pos1, const Coord pos2, const Coord pos3)$/;"	f
finBound	DogeLib/Vec.h	/^bool finBound(const float n, const float min, const float max)$/;"	f
font	DogeLib/Graphics.h	/^    TTF_Font* font;$/;"	m	struct:__anon8
fontColor	DogeLib/Graphics.h	/^    Color fontColor;$/;"	m	struct:__anon8
fontSize	DogeLib/Graphics.h	/^    uint fontSize;$/;"	m	struct:__anon8
frameEnd	DogeLib/Graphics.h	/^void frameEnd(const uint t)$/;"	f
frameStart	DogeLib/Graphics.h	/^uint frameStart(void)$/;"	f
freeImg	DogeLib/Image.h	/^void freeImg(Img *image)$/;"	f
freeTexture	DogeLib/Image.h	/^void freeTexture(Texture *t)$/;"	f
fwrap	DogeLib/Vec.h	/^float fwrap(const float n, const float min, const float max)$/;"	f
getColor	DogeLib/Graphics.h	/^Color getColor(void)$/;"	f
getDisplayIndexLen	DogeLib/Display.h	/^Length getDisplayIndexLen(const uint i)$/;"	f
getDisplayIndexOffset	DogeLib/Display.h	/^Coord getDisplayIndexOffset(const uint i)$/;"	f
getDisplayIndexRect	DogeLib/Display.h	/^Rect getDisplayIndexRect(const uint i)$/;"	f
getDisplayNum	DogeLib/Display.h	/^uint getDisplayNum(void)$/;"	f
getDisplayTotalLen	DogeLib/Display.h	/^Length getDisplayTotalLen(void)$/;"	f
getInt	DogeLib/GetInt.h	/^int getInt(void)$/;"	f
getR	DogeLib/GetInt.h	/^int getR(const int num)$/;"	f
getTextColor	DogeLib/Text.h	/^Color getTextColor(void)$/;"	f
getTextLength	DogeLib/Text.h	/^Length getTextLength(const char *text)$/;"	f
getTextListRect	DogeLib/Text.h	/^Rect* getTextListRect(const char **textList, Rect *const rect, const Coord start, const Coord stop, const uint num)$/;"	f
getTextListRectCentered	DogeLib/Text.h	/^Rect* getTextListRectCentered(const char **textList, Rect *const rect, const Coord start, const Coord stop, const uint num)$/;"	f
getTextSize	DogeLib/Text.h	/^int getTextSize(void)$/;"	f
getTextXLen	DogeLib/Text.h	/^int getTextXLen(const char *text)$/;"	f
getTextYLen	DogeLib/Text.h	/^int getTextYLen(const char *text)$/;"	f
getTicks	DogeLib/Timing.h	/^uint getTicks(void)$/;"	f
getTimeIn	DogeLib/Timing.h	/^uint getTimeIn(const uint sec)$/;"	f
getWinDisplayIndex	DogeLib/Display.h	/^int getWinDisplayIndex(void)$/;"	f
getWinDisplayLen	DogeLib/Display.h	/^Length getWinDisplayLen(void)$/;"	f
getWinDisplayOffset	DogeLib/Display.h	/^Coord getWinDisplayOffset(void)$/;"	f
getWinDisplayRect	DogeLib/Display.h	/^Rect getWinDisplayRect(void)$/;"	f
getWindowLen	DogeLib/Graphics.h	/^Length getWindowLen(void)$/;"	f
getWindowMid	DogeLib/Graphics.h	/^Length getWindowMid(void)$/;"	f
getWindowResizable	DogeLib/Graphics.h	/^bool getWindowResizable(void)$/;"	f
gfx	DogeLib/Graphics.h	/^}gfx = {0};$/;"	v	typeref:struct:__anon8
gfx_init	DogeLib/Graphics.h	/^void gfx_init(void)$/;"	f
gfx_quit	DogeLib/Graphics.h	/^void gfx_quit(void)$/;"	f
hitBall	main.c	/^Ball hitBall(Ball ball, const Stroke stroke)$/;"	f
i16	DogeLib/Types.h	/^typedef int16_t             i16;$/;"	t
i32	DogeLib/Types.h	/^typedef int32_t             i32;$/;"	t
i64	DogeLib/Types.h	/^typedef int64_t             i64;$/;"	t
i8	DogeLib/Types.h	/^typedef int8_t              i8;$/;"	t
iC	DogeLib/Types.h	/^Coord iC(const int x, const int y)$/;"	f
iabs	DogeLib/Types.h	/^int iabs(const int i)$/;"	f
imax	DogeLib/Types.h	/^int imax(const int a, const int b)$/;"	f
imgTexture	DogeLib/Image.h	/^Texture* imgTexture(Img *img)$/;"	f
img_init	DogeLib/Image.h	/^void img_init(void)$/;"	f
img_quit	DogeLib/Image.h	/^void img_quit(void)$/;"	f
imin	DogeLib/Types.h	/^int imin(const int a, const int b)$/;"	f
inBound	DogeLib/Coords.h	/^bool inBound(const int n, const int min, const int max)$/;"	f
inRange	DogeLib/Coords.h	/^bool inRange(const int n, const Range range)$/;"	f
init	DogeLib/DogeUtil.h	/^void init(void)$/;"	f
initBalls	main.c	/^void initBalls(Ball *balls, const Length window)$/;"	f
input_init	DogeLib/Input.h	/^void input_init(void)$/;"	f
intToChar	DogeLib/GetInt.h	/^char intToChar(const int num)$/;"	f
intToStr	DogeLib/GetInt.h	/^void intToStr(int num, char* str)$/;"	f
invSign	DogeLib/Types.h	/^int invSign(const int s, const int n)$/;"	f
invSignf	DogeLib/Types.h	/^float invSignf(const float s, const float n)$/;"	f
irC	DogeLib/Types.h	/^Coord irC(const Rect rect)$/;"	f
irL	DogeLib/Types.h	/^Coord irL(const Rect rect)$/;"	f
isSunk	main.c	/^    bool isSunk;$/;"	m	struct:__anon4	file:
key	DogeLib/Input.h	/^    u8 key[SDL_NUM_SCANCODES];$/;"	m	struct:__anon5
keyChanged	DogeLib/Input.h	/^bool keyChanged(const Scancode key)$/;"	f
keyHeld	DogeLib/Input.h	/^bool keyHeld(const Scancode key)$/;"	f
keyPressed	DogeLib/Input.h	/^bool keyPressed(const Scancode key)$/;"	f
keyReleased	DogeLib/Input.h	/^bool keyReleased(const Scancode key)$/;"	f
keyState	DogeLib/Input.h	/^bool keyState(const Scancode key)$/;"	f
keys	DogeLib/Input.h	/^}keys = {0};$/;"	v	typeref:struct:__anon5
lbound	DogeLib/Types.h	/^int lbound(const int n, const int l)$/;"	f
lboundf	DogeLib/Types.h	/^float lboundf(const float n, const float l)$/;"	f
lint	DogeLib/Types.h	/^typedef long int            lint;$/;"	t
loadDrawImg	DogeLib/Image.h	/^void loadDrawImg(const char *imgFile)$/;"	f
loadImg	DogeLib/Image.h	/^Img* loadImg(const char *imgFile)$/;"	f
loadTexture	DogeLib/Image.h	/^Texture* loadTexture(const char *imgFile)$/;"	f
main	main.c	/^int main(int argc, char const *argv[])$/;"	f
matchSign	DogeLib/Types.h	/^int matchSign(const int s, const int n)$/;"	f
matchSignf	DogeLib/Types.h	/^float matchSignf(const float s, const float n)$/;"	f
max	DogeLib/Types.h	/^        Coord max;$/;"	m	struct:__anon16::__anon20
max	DogeLib/Types.h	/^        int max;$/;"	m	struct:__anon10::__anon13
maximizeWindow	DogeLib/Graphics.h	/^Length maximizeWindow(void)$/;"	f
min	DogeLib/Types.h	/^        Coord min;$/;"	m	struct:__anon16::__anon20
min	DogeLib/Types.h	/^        int min;$/;"	m	struct:__anon10::__anon13
mouse	DogeLib/Input.h	/^}mouse = {0};$/;"	v	typeref:struct:__anon6
mouseBtnChanged	DogeLib/Input.h	/^bool mouseBtnChanged(const u32 mouseBtn)$/;"	f
mouseBtnHeld	DogeLib/Input.h	/^bool mouseBtnHeld(const u32 mouseBtn)$/;"	f
mouseBtnPressed	DogeLib/Input.h	/^bool mouseBtnPressed(const u32 mouseBtn)$/;"	f
mouseBtnReleased	DogeLib/Input.h	/^bool mouseBtnReleased(const u32 mouseBtn)$/;"	f
mouseBtnState	DogeLib/Input.h	/^bool mouseBtnState(const u32 mouseBtn)$/;"	f
mouseMoveStart	DogeLib/Input.h	/^bool mouseMoveStart(void)$/;"	f
mouseMoveStop	DogeLib/Input.h	/^bool mouseMoveStop(void)$/;"	f
mouseMovement	DogeLib/Input.h	/^Length mouseMovement(void)$/;"	f
mouseMoving	DogeLib/Input.h	/^bool mouseMoving(void)$/;"	f
mouseScrolled	DogeLib/Input.h	/^bool mouseScrolled(const u32 mouseWheel)$/;"	f
neg	DogeLib/Types.h	/^        Coord neg;$/;"	m	struct:__anon16::__anon21
neg	DogeLib/Types.h	/^        int neg;$/;"	m	struct:__anon10::__anon14
negSign	DogeLib/Types.h	/^int negSign(const int n)$/;"	f
negSignf	DogeLib/Types.h	/^float negSignf(const float n)$/;"	f
num	main.c	/^    uint num;$/;"	m	struct:__anon4	file:
numVertex	DogeLib/Types.h	/^    uint numVertex;$/;"	m	struct:__anon15
outlineWindow	DogeLib/Graphics.h	/^void outlineWindow(void)$/;"	f
outlined	DogeLib/Graphics.h	/^    bool outlined;$/;"	m	struct:__anon8
panic	DogeLib/Panic.h	19;"	d
panic_helper	DogeLib/Panic.h	/^void panic_helper(const char *func, const char *file, const int line, const char * format, ...)$/;"	f
polyBbMinMax	DogeLib/Poly.h	/^CoordPair polyBbMinMax(const Poly p)$/;"	f
polyBbRect	DogeLib/Poly.h	/^Rect polyBbRect(const Poly p)$/;"	f
polyCreate	DogeLib/Poly.h	/^Poly polyCreate(const uint numVertex, ...)$/;"	f
polyDestroy	DogeLib/Poly.h	/^void polyDestroy(const Poly p)$/;"	f
pos	DogeLib/Input.h	/^        Coord pos;$/;"	m	struct:__anon6::__anon7
pos	DogeLib/Input.h	/^    Coord pos;$/;"	m	struct:__anon6
pos	DogeLib/Types.h	/^        Coord pos;$/;"	m	struct:__anon16::__anon21
pos	DogeLib/Types.h	/^        int pos;$/;"	m	struct:__anon10::__anon14
pos	main.c	/^    Coordf pos;$/;"	m	struct:__anon4	file:
pos1	DogeLib/Types.h	/^        Coord pos1;$/;"	m	struct:__anon16::__anon18
pos2	DogeLib/Types.h	/^        Coord pos2;$/;"	m	struct:__anon16::__anon18
posSign	DogeLib/Types.h	/^int posSign(const int n)$/;"	f
posSignf	DogeLib/Types.h	/^float posSignf(const float n)$/;"	f
prev	DogeLib/Input.h	/^    u8 prev[SDL_NUM_SCANCODES];$/;"	m	struct:__anon5
prev	DogeLib/Input.h	/^    }prev;$/;"	m	struct:__anon6	typeref:struct:__anon6::__anon7
printStroke	main.c	/^void printStroke(const Stroke stroke)$/;"	f
prvLen	DogeLib/Graphics.h	/^    Length prvLen;$/;"	m	struct:__anon8
radMagToCf	DogeLib/Vec.h	/^Coordf radMagToCf(const float rad, const float mag)$/;"	f
radToCf	DogeLib/Vec.h	/^Coordf radToCf(const float rad)$/;"	f
radToDeg	DogeLib/Vec.h	/^float radToDeg(const float rad)$/;"	f
randBall	Deprecated.h	/^Ball randBall(const Length window, const Coord hole)$/;"	f
randHole	Deprecated.h	/^Coord randHole(const Length window)$/;"	f
randRange	DogeLib/DogeUtil.h	/^float randRange(float a, float b)$/;"	f
rectCenter	DogeLib/Coords.h	/^Rect rectCenter(Rect r)$/;"	f
rectOffset	DogeLib/Coords.h	/^Rect rectOffset(const Rect rect, const Offset off)$/;"	f
rectify	DogeLib/Coords.h	/^Rect rectify(const Coord pos, const Length len)$/;"	f
renderer	DogeLib/Graphics.h	/^    SDL_Renderer* renderer;$/;"	m	struct:__anon8
restoreLen	DogeLib/Graphics.h	/^    Length restoreLen;$/;"	m	struct:__anon8
restoreWindow	DogeLib/Graphics.h	/^Length restoreWindow(void)$/;"	f
secondsToTicks	DogeLib/Timing.h	/^uint secondsToTicks(const uint sec)$/;"	f
setBlend	DogeLib/Graphics.h	/^void setBlend(const BlendMode mode)$/;"	f
setColor	DogeLib/Graphics.h	/^void setColor(const Color c)$/;"	f
setRGB	DogeLib/Graphics.h	/^void setRGB(const u8 r, const u8 g, const u8 b)$/;"	f
setRGBA	DogeLib/Graphics.h	/^void setRGBA(const u8 r, const u8 g, const u8 b, const u8 a)$/;"	f
setTextColor	DogeLib/Text.h	/^void setTextColor(const Color c)$/;"	f
setTextSize	DogeLib/Text.h	/^void setTextSize(const uint size)$/;"	f
setWindowLen	DogeLib/Graphics.h	/^void setWindowLen(const Length len)$/;"	f
setWindowMode	DogeLib/Graphics.h	/^void setWindowMode(const WindowMode mode)$/;"	f
setWindowResizable	DogeLib/Graphics.h	/^void setWindowResizable(const bool resizable)$/;"	f
setWindowSize	DogeLib/Graphics.h	/^void setWindowSize(const uint x, const uint y)$/;"	f
shiftR	DogeLib/GetInt.h	/^int shiftR(const int num)$/;"	f
spanTextList	DogeLib/Text.h	/^void spanTextList(const char **textList, const Coord start, const Coord stop, const uint num)$/;"	f
spanTextListCentered	DogeLib/Text.h	/^void spanTextListCentered(const char **textList, const Coord start, const Coord stop, const uint num)$/;"	f
spanTextListCoords	DogeLib/Text.h	/^Coord* spanTextListCoords(Coord *coords, const Coord start, const Coord stop, const uint num)$/;"	f
spanTextListCoordsCentered	DogeLib/Text.h	/^Coord* spanTextListCoordsCentered(Coord *coords, const Coord start, const Coord stop, const uint num)$/;"	f
state	DogeLib/Input.h	/^        u32 state;$/;"	m	struct:__anon6::__anon7
state	DogeLib/Input.h	/^    u32 state;$/;"	m	struct:__anon6
state	main.c	/^    StrokeState state;$/;"	m	struct:__anon2	file:
strEndsWith	DogeLib/Text.h	/^bool strEndsWith(const char *str, const char *end)$/;"	f
strToInt	DogeLib/GetInt.h	/^int strToInt(const char *str)$/;"	f
strokenumber	main.c	/^    uint strokenumber;$/;"	m	struct:__anon2	file:
textImg	DogeLib/Text.h	/^Img* textImg(const char *text)$/;"	f
textTexture	DogeLib/Text.h	/^Texture* textTexture(const char *text)$/;"	f
text_init	DogeLib/Text.h	/^void text_init(void)$/;"	f
text_quit	DogeLib/Text.h	/^void text_quit(void)$/;"	f
textureLen	DogeLib/Image.h	/^Length textureLen(Texture *texture)$/;"	f
textureRect	DogeLib/Image.h	/^Rect textureRect(Texture *texture, const Coord pos)$/;"	f
type	main.c	/^    BallType type;$/;"	m	struct:__anon4	file:
u16	DogeLib/Types.h	/^typedef uint16_t            u16;$/;"	t
u32	DogeLib/Types.h	/^typedef uint32_t            u32;$/;"	t
u32ToColor	DogeLib/Graphics.h	/^Color u32ToColor(const u32 u)$/;"	f
u64	DogeLib/Types.h	/^typedef uint64_t            u64;$/;"	t
u8	DogeLib/Types.h	/^typedef uint8_t             u8;$/;"	t
ubound	DogeLib/Types.h	/^int ubound(const int n, const int u)$/;"	f
uboundf	DogeLib/Types.h	/^float uboundf(const float n, const float u)$/;"	f
uchar	DogeLib/Types.h	/^typedef unsigned char       uchar;$/;"	t
uint	DogeLib/Types.h	/^typedef unsigned int        uint;$/;"	t
ul	DogeLib/Types.h	/^typedef unsigned long       ul;$/;"	t
ull	DogeLib/Types.h	/^typedef unsigned long long  ull;$/;"	t
unrectify	DogeLib/Coords.h	/^Length unrectify(const Rect rect)$/;"	f
updateBalls	main.c	/^void updateBalls(Ball *balls, const Length window)$/;"	f
updateStroke	main.c	/^Stroke updateStroke(Stroke stroke, Ball *balls)$/;"	f
vec	DogeLib/Input.h	/^        Offset vec;$/;"	m	struct:__anon6::__anon7
vec	DogeLib/Input.h	/^    Offset vec;$/;"	m	struct:__anon6
vel	main.c	/^    Coordf vel;$/;"	m	struct:__anon4	file:
vertex	DogeLib/Types.h	/^    Coord *vertex;$/;"	m	struct:__anon15
wheel	DogeLib/Input.h	/^        u32 wheel;$/;"	m	struct:__anon6::__anon7
wheel	DogeLib/Input.h	/^    u32 wheel;$/;"	m	struct:__anon6
window	DogeLib/Graphics.h	/^    SDL_Window* window;$/;"	m	struct:__anon8
windowResized	DogeLib/Graphics.h	/^bool windowResized(void)$/;"	f
wrap	DogeLib/Coords.h	/^int wrap(const int n, const int min, const int max)$/;"	f
x	DogeLib/Types.h	/^        Coord x;$/;"	m	struct:__anon16::__anon19
x	DogeLib/Types.h	/^        float x;$/;"	m	struct:__anon22::__anon23
x	DogeLib/Types.h	/^        int x;$/;"	m	struct:__anon10::__anon12
y	DogeLib/Types.h	/^        Coord y;$/;"	m	struct:__anon16::__anon19
y	DogeLib/Types.h	/^        float y;$/;"	m	struct:__anon22::__anon23
y	DogeLib/Types.h	/^        int y;$/;"	m	struct:__anon10::__anon12
